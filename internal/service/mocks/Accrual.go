// Code generated by mockery v2.37.0. DO NOT EDIT.

package mocks

import (
	context "context"

	clients "github.com/vladislav-kr/gophermart/internal/clients"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Accrual is an autogenerated mock type for the Accrual type
type Accrual struct {
	mock.Mock
}

// Order provides a mock function with given fields: ctx, orderID
func (_m *Accrual) Order(ctx context.Context, orderID string) (*clients.OrderAccrual, time.Duration, error) {
	ret := _m.Called(ctx, orderID)

	var r0 *clients.OrderAccrual
	var r1 time.Duration
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*clients.OrderAccrual, time.Duration, error)); ok {
		return rf(ctx, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *clients.OrderAccrual); ok {
		r0 = rf(ctx, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clients.OrderAccrual)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) time.Duration); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Get(1).(time.Duration)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, orderID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewAccrual creates a new instance of Accrual. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccrual(t interface {
	mock.TestingT
	Cleanup(func())
}) *Accrual {
	mock := &Accrual{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
